---
name: 'Archlinux PKGBUILD'
description: 'An action for makepkg on a clean arch image'
inputs:
  pkgbuild_root:
    description: 'The relative location of PKGBUILD root.'
    required: true
  aur_username:
    description: 'Username for the AUR maintainer (used for commit).'
    required: true
  aur_email:
    description: 'Email for the AUR maintainer (used for commit)'
    required: true
  aur_ssh_private_key:
    description: 'Private key with access to AUR package.'
    required: true
  commit_message:
    description: 'Commit message for the AUR package.'
    required: false
  setup_aur:
    description: 'Whether to do the AUR setup or skip it.'
    required: false
    default: 'true'
  dry_run:
    description: 'Used for testing the action. To do a full commit, set this to false'
    required: false
    default: 'true'
  is_python_pkg:
    description: 'Whether this is a python format package using pypi files as source. Based on the PKGBUILD documentations these should be prefixed with "python-", and this action needs that to be true. If that is not the case `python_pkg_name` may be used to override the basename of the python package on pypi. If neither is true or valid, then the pypi version check is simply ignored. On its own changes no behaviour without the pypi flags.'
    required: false
    default: 'false'
  python_pkg_name:
    description: 'Override for the python package name. See `is_python_pkg` for use-case.'
    required: false
  use_pypi_release_version:
    description: 'Whether to upgrade a python package using the latest release on pypi. Requires `is_python_pkg` to be true. It uses the pypi rss feed to read the latest release.'
    required: false
    default: 'false'
  use_pypi_prerelease_version:
    description: 'Whether to upgrade a python package using the latest release (including prereleases - a, b, rc & dev) on pypi. Requires `is_python_pkg` to be true. Overrides the `use_pypi_release_version` regardless of value. It uses the pypi rss feed to read the latest release.'
    required: false
    default: 'false'
  use_git_release_version:
    description: 'Whether to upgrade a package using the latest release on github. Requires url in the PKGBUILD to use the format "https://github.com/owner/repository". If that is not the case `github_pkg_repository` may be used to override the repository url. It uses the github api to read the latest release and sets the pkgver to the release version.'
    required: false
    default: 'false'
  github_pkg_repository:
    description: 'Override for the github package repository. See `use_git_release_version` for use-case.'
    required: false
  custom_build_cmd:
    description: 'Used for specifying a custom build command in-case the standard command is undesirable. The normal command used is "makepkg --config /home/builder/.makepkg.conf -cfC --needed --nodeps --noconfirm". Note: --nodeps is used since all dependencies are installed before a build is attempted.'
    required: false
    default: ''
  install_optdepends:
    description: 'Install optional dependencies.'
    required: false
    default: 'false'
outputs:
  pkgn:
    description: 'The location of the built package. The key name is an incrementing integer for each package in the PKGBUILD. If the package is a split package, then there will be multiple keys starting with "pkg0". For a single package, only 1 key will be present as "pkg0".'
  ver0:
    description: 'The "<pkgver>-<pkgrel>" of the built package. The key name is an incrementing integer for each package in the PKGBUILD. If the package is a split package, then there will be multiple keys starting with "ver0". For a single package, only 1 key will be present as "ver0".'
branding:
  icon: 'package'
  color: 'blue'
runs:
  using: 'docker'
  image: 'Dockerfile'
